--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3 (Debian 16.3-1.pgdg120+1)
-- Dumped by pg_dump version 16.3 (Debian 16.3-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: set_log_date(); Type: FUNCTION; Schema: public; Owner: docker
--

CREATE FUNCTION public.set_log_date() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.log_date := CURRENT_DATE;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_log_date() OWNER TO docker;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: bookmarks; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.bookmarks (
    id_user character varying(50) NOT NULL,
    id_post character varying(50) NOT NULL,
    id bigint NOT NULL
);


ALTER TABLE public.bookmarks OWNER TO docker;

--
-- Name: bookmarks_seq; Type: SEQUENCE; Schema: public; Owner: docker
--

CREATE SEQUENCE public.bookmarks_seq
    START WITH 1
    INCREMENT BY 50
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.bookmarks_seq OWNER TO docker;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.categories (
    id_category integer NOT NULL,
    category_name character varying(255),
    category_desc character varying(255)
);


ALTER TABLE public.categories OWNER TO docker;

--
-- Name: categories_id_category_seq; Type: SEQUENCE; Schema: public; Owner: docker
--

CREATE SEQUENCE public.categories_id_category_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.categories_id_category_seq OWNER TO docker;

--
-- Name: categories_id_category_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: docker
--

ALTER SEQUENCE public.categories_id_category_seq OWNED BY public.categories.id_category;


--
-- Name: categories_post_category; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.categories_post_category (
    category_id_category integer NOT NULL,
    post_category_id_post character varying(30) NOT NULL
);


ALTER TABLE public.categories_post_category OWNER TO docker;

--
-- Name: logs; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.logs (
    id_user character varying(30),
    log_date date
);


ALTER TABLE public.logs OWNER TO docker;

--
-- Name: post_categories; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.post_categories (
    id_post character varying(50) NOT NULL,
    id_category integer NOT NULL,
    id bigint NOT NULL
);


ALTER TABLE public.post_categories OWNER TO docker;

--
-- Name: post_categories_id_seq; Type: SEQUENCE; Schema: public; Owner: docker
--

ALTER TABLE public.post_categories ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.post_categories_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: posts; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.posts (
    id_post character varying(50) NOT NULL,
    id_user_owner character varying(50) NOT NULL,
    title character varying(255) NOT NULL,
    description text NOT NULL,
    ingredients text NOT NULL,
    recipe text NOT NULL,
    image character varying(255) NOT NULL,
    prep_time character varying(10) NOT NULL,
    difficulty character varying(10) NOT NULL,
    number_of_servings integer NOT NULL,
    created_at character varying(20) NOT NULL,
    likes integer DEFAULT 0 NOT NULL,
    dislike integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.posts OWNER TO docker;

--
-- Name: rating; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.rating (
    id_user character varying(30) NOT NULL,
    id_post character varying(30) NOT NULL,
    score integer NOT NULL,
    CONSTRAINT rating_score_check CHECK (((score >= '-1'::integer) AND (score <= 1)))
);


ALTER TABLE public.rating OWNER TO docker;

--
-- Name: roles; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.roles (
    id_role integer NOT NULL,
    role_desc character varying(20) NOT NULL
);


ALTER TABLE public.roles OWNER TO docker;

--
-- Name: users; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.users (
    id_user character varying(50) NOT NULL,
    id_role integer DEFAULT 1 NOT NULL,
    email character varying(100) NOT NULL,
    password character varying(100) NOT NULL,
    username character varying(50) NOT NULL
);


ALTER TABLE public.users OWNER TO docker;

--
-- Name: users_details; Type: TABLE; Schema: public; Owner: docker
--

CREATE TABLE public.users_details (
    id_users_details character varying(50) NOT NULL,
    first_name character varying(30),
    last_name character varying(50),
    city character varying(50),
    street_name character varying(50),
    street_address character varying(20),
    postal_code character varying(20),
    state character varying(50),
    country character varying(50)
);


ALTER TABLE public.users_details OWNER TO docker;

--
-- Name: categories id_category; Type: DEFAULT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.categories ALTER COLUMN id_category SET DEFAULT nextval('public.categories_id_category_seq'::regclass);


--
-- Data for Name: bookmarks; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.bookmarks (id_user, id_post, id) FROM stdin;
\.


--
-- Data for Name: categories; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.categories (id_category, category_name, category_desc) FROM stdin;
1	Appetizers & Snacks	Small bites and finger foods perfect for starting a meal or enjoying on their own.
2	Breakfast & Brunch	Morning delights ranging from hearty breakfast classics to light brunch options.
3	Salads & Dressings	Fresh and vibrant salads paired with homemade dressings for a healthy meal or side.
4	Soups & Stews	Comforting bowls of warmth, ideal for any season, packed with flavor and wholesome ingredients.
5	Main Courses (Meat)	Hearty meat-centric dishes that serve as the focal point of a meal, satisfying and savory.
6	Main Courses (Vegetarian/Vegan)	Plant-based main dishes showcasing the versatility and deliciousness of vegetables, legumes, and grains.
7	Pasta & Noodles	Classic pasta dishes and noodle-based recipes from around the world, offering comfort in every bite.
8	Rice & Grains	Nutritious and filling recipes featuring rice, quinoa, barley, and other grains as the star ingredient.
9	Seafood	Fresh and flavorful seafood recipes celebrating the bounty of the ocean, from fish to shellfish.
\.


--
-- Data for Name: categories_post_category; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.categories_post_category (category_id_category, post_category_id_post) FROM stdin;
\.


--
-- Data for Name: logs; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.logs (id_user, log_date) FROM stdin;
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
666b8d092770c2.98573332	2024-12-30
666e1bbb9e7401.42585095	2024-12-30
\.


--
-- Data for Name: post_categories; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.post_categories (id_post, id_category, id) FROM stdin;
\.


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.posts (id_post, id_user_owner, title, description, ingredients, recipe, image, prep_time, difficulty, number_of_servings, created_at, likes, dislike) FROM stdin;
\.


--
-- Data for Name: rating; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.rating (id_user, id_post, score) FROM stdin;
\.


--
-- Data for Name: roles; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.roles (id_role, role_desc) FROM stdin;
1	user
0	admin
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.users (id_user, id_role, email, password, username) FROM stdin;
\.


--
-- Data for Name: users_details; Type: TABLE DATA; Schema: public; Owner: docker
--

COPY public.users_details (id_users_details, first_name, last_name, city, street_name, street_address, postal_code, state, country) FROM stdin;
\.


--
-- Name: bookmarks_seq; Type: SEQUENCE SET; Schema: public; Owner: docker
--

SELECT pg_catalog.setval('public.bookmarks_seq', 1, false);


--
-- Name: categories_id_category_seq; Type: SEQUENCE SET; Schema: public; Owner: docker
--

SELECT pg_catalog.setval('public.categories_id_category_seq', 20, true);


--
-- Name: post_categories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: docker
--

SELECT pg_catalog.setval('public.post_categories_id_seq', 39, true);


--
-- Name: categories categories_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id_category);


--
-- Name: categories_post_category categories_post_category_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.categories_post_category
    ADD CONSTRAINT categories_post_category_pkey PRIMARY KEY (category_id_category, post_category_id_post);


--
-- Name: posts posts_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id_post);


--
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id_role);


--
-- Name: users_details users_details_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.users_details
    ADD CONSTRAINT users_details_pkey PRIMARY KEY (id_users_details);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id_user);


--
-- Name: logs before_insert_logs; Type: TRIGGER; Schema: public; Owner: docker
--

CREATE TRIGGER before_insert_logs BEFORE INSERT ON public.logs FOR EACH ROW EXECUTE FUNCTION public.set_log_date();


--
-- Name: bookmarks bookmarks_id_post_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.bookmarks
    ADD CONSTRAINT bookmarks_id_post_fkey FOREIGN KEY (id_post) REFERENCES public.posts(id_post) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: bookmarks bookmarks_id_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.bookmarks
    ADD CONSTRAINT bookmarks_id_user_fkey FOREIGN KEY (id_user) REFERENCES public.users(id_user) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: categories_post_category fk6iqw8vrm0qty8e17sn4889l5q; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.categories_post_category
    ADD CONSTRAINT fk6iqw8vrm0qty8e17sn4889l5q FOREIGN KEY (post_category_id_post) REFERENCES public.posts(id_post);


--
-- Name: categories_post_category fkycfpiy7swul97blay5w9ernx; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.categories_post_category
    ADD CONSTRAINT fkycfpiy7swul97blay5w9ernx FOREIGN KEY (category_id_category) REFERENCES public.categories(id_category);


--
-- Name: post_categories post_categories_id_category_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.post_categories
    ADD CONSTRAINT post_categories_id_category_fkey FOREIGN KEY (id_category) REFERENCES public.categories(id_category) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: post_categories post_categories_id_post_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.post_categories
    ADD CONSTRAINT post_categories_id_post_fkey FOREIGN KEY (id_post) REFERENCES public.posts(id_post) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: posts posts_id_user_owner_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_id_user_owner_fkey FOREIGN KEY (id_user_owner) REFERENCES public.users(id_user) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: rating rating_id_post_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.rating
    ADD CONSTRAINT rating_id_post_fkey FOREIGN KEY (id_post) REFERENCES public.posts(id_post) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: rating rating_id_user_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.rating
    ADD CONSTRAINT rating_id_user_fkey FOREIGN KEY (id_user) REFERENCES public.users(id_user) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: users_details users_details_id_users_details_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.users_details
    ADD CONSTRAINT users_details_id_users_details_fkey FOREIGN KEY (id_users_details) REFERENCES public.users(id_user) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: users users_id_role_fkey; Type: FK CONSTRAINT; Schema: public; Owner: docker
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_id_role_fkey FOREIGN KEY (id_role) REFERENCES public.roles(id_role) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

